Data Model

Reference Data

Complexity: Complex, Medium, Simple. Define multipliers for each.
Phases: Analysis, Design, Build, Test. This is per component / unit.
Architectural Layer: Infrastructure, Technical, Information, Application, Presentation.
Application Type: Conceptual, SOA Suite, Web, Spring, Plain, Database, AnalyticsBigData, AnalyticsBI. Define multipliers for each.
Language: Python, PHP, Java, Go, XML, HTML5, JS

Component Type:
Define base values for each by phase.

DevEnv subsystem

PhysicalSystemsDev package
ComputeDev - Infra - acquisition and initialization
StorageDev - Infra - acquisition and initialization
ComputeBuild - Infra - acquisition and initialization
StorageBuild - Infra - acquisition and initialization

ToolsDev package
SourceRepository - Infra - acquisition and configuration
ArtifactRepository - Infra - acquisition and configuration
ALMDev - Technical - acquisition and configuration
BuildToolDev - Technical - installation and configuration (Ant, Maven, Make, etc)
IDEDev - Technical - installation and configuration (Eclipse, JDeveloper, etc)

AppFrameworkDev package - per application type - installation and configuration
JEEServerDev - Technical, Web|SOASuite, Java
SOASuiteDev - Technical, SOASuite, Java
JSEDev - Technical, Plain, Java
SpringDev - Technical, Spring|Web, Java
PyDev - Technical, Plain, Python
PHPDev - Technical, Web|Plain, PHP
GoDev - Technical, Web|Plain, Go
DataStoresSWDev - Technical - per application type - installation and configuration

SecurityDev package - provisioning
KeyStoreDev - Technical
CertificateDev - Technical

QAEnv subsystem

PhysicalSystemsQA package
ComputeQA
StorageQA

ToolsQA package - Technical - installation and configuration
FunctionalTestingToolSuite
BugTrackingTool
ALMQA - only tools like Sonar or some such that show quality from automated tests

DataQA - Information - acquisition and configuration (functional test data)

AppFrameworkQA package - per application type - installation and configuration
JEEServerQA - Technical, Web|SOASuite, Java
SOASuiteQA - Technical, SOASuite, Java
JSEQA - Technical, Plain, Java
SpringQA - Technical, Spring|Web, Java
PyQA - Technical, Plain, Python
PHPQA - Technical, Web|Plain, PHP
GoQA - Technical, Web|Plain, Go
OHSQA - Technical, Web, XML
DataStoresSWQA - Technical - per application type - installation and configuration

SecurityQA package - provisioning
KeyStoreDev - Technical
CertificateDev - Technical
AAA- Technical
Connectivity - Technical - software driven network configuration

Performance/Security Env subsystem

like QA but with security set up at full strength like Prod and PhysicalSystemsPerf set up like Prod

Could also have a Partner Integration Env for testing integrations with external partners

ProductionEnv subsystem

Schema package - Information - data model definition
RDBMS_database
RDBMS_schema
RDBMS_table
RDBMS_index
RDBMS_relationships
NoSQL_database
NoSQL_schema
NoSQL_table
NoSQL_index

DataObject - Application
DataQuery - Application
TransferObject - Application
DataService - Application
BusinessLogic - Application
BusinessService - Application
FrameworkService - Application
PresentationWidget - Presentation
PresentationScreen - Presentation
PresentationFlow - Presentation
PresentationLookAndFeel - Presentation


Functional Data

NFR build categories:
Security - provides for security aspects in higher level artifacts
Maintainability - provides for aspects (e.g. telemetry, error handling, lifecycle management, ...)  in higher level artifacts

Higher level phases:
Initiation - providing initial analysis at - Application, Subsystem, Service levels
Construction - factors in composition and overheads to the ADBT phases for components, adds higher level NFR builds
Verification - a higher level phase including Integrated System Functional Test, Performance Test, and Security Test
Deployment - a higher level phase where the application is rolled out to users

Following have: name, description, version, estimate -- abstracted into BasicSolutionArtifact
Component: also has type, complexity, layer, language, count
Interaction: also has fromS, toS, message, api. S = Subsystem or Service
Integration: also has fromApplication, toApplication, message, endPoint
Message: also has type (ACTION, INFO, ERROR, DATA), encoding (POJO, XML, JSON), dataType (factor is depth), subType (each has factor), data

Following additionally have: constituents, composition_factor per ADBT phase, nfr_build per NFR category, verification per Test category
	abstracted into ContainingSolutionArtifact
Package: no additional factors 
Service: also has overhead per ADBT phase. Constituted only of packages
Subsystem: also has overhead per ADBT phase. Constituted only of packages
Application: also has overhead per ADBT phase, application_type, initiation, deployment.
	Constituted of subsystems, services, and interactions between them

Logic

Component
Take the base value per phase for type.
Multiply by count.
Multiply by the complexity.
Store in phase estimates.
Add for component estimate.

Package
Sum phase estimates of constituents.
Multiply by composition_factor.
Add for package estimate.

Service
Sum phase estimates of constituents.
Multiply by composition_factor.
Add overhead.
Add for service estimate.

Subsystem
Sum phase estimates of constituents.
Multiply by composition_factor.
Add overhead.
Add for subsystem estimate.

Application
Sum phase estimates of constituents.
Multiply by composition_factor.
Add overhead.
Add and then multiply by application_type for construction estimate.
Add separately qa, performance, security of constituents and multiply each by application_type for corresponding estimates.
Add higher level phase estimates for application estimate.

DAO - 1 per each type
AbstractDAO
	link to a pooled data source
	maintains a cache of entity states
	ensureObjectOfType(o): whether object is of the type the DAO expects -- abstract
	getTypeOfObject(o): abstract
	getNameOfObject(o): abstract
	getState: calls above 3 and gets state based on name. if it exists, it sets it to UPDATE, else NEW and add to cache
	lockForUpdate: calls above 3. if state does not exist in cache add and set to NONE. lock for mod
	Inner Classes: (CriteriaBuilder, LogicCriteria, BasicCriteria), FieldState, EntityState (by class and name + op {NEW, UPDATE, DELETE, NONE})

--------------------------------------------------------------------
Basic Info
Entity Annotation	Relationship	columnName	fieldClass		fieldRefersTo
Column				Basic			cann.name()	<primitive>		NA
Column				Enumerated		cann.name()	Enum<?>			EnumType
ManyToOne			JoinColumn		cann.name()	Class<?>		IdForType
OneToMany			NA				NA			List<Class<?>>	ForeignTable

Reference Info
Entity Annotation	Relationship	targetClass			targetField		targetTableName
Column				Basic			NA					NA				NA
Column				Enumerated		NA					NA				NA
ManyToOne			JoinColumn		mann.targetEntity()	NA				targetClass.getAnnotation(
																		  javax.persistence.Table.class
																		  ).name()
OneToMany			NA				mann.targetEntity()	mann.mappedBy()	targetClass.getAnnotation(
																		  javax.persistence.Table.class
																		  ).name()

How to Process
Field Kind			Insert					Update					Select
BasicColumn			own table as is			own table as is			own table as is
EnumeratedColumn	own table with name()	own table with name()	own table valueOf()
ManyToOneJoinColumn	own table with getName() own table with getName() load object from target table matching key = getName()
OneToManyMappedBy	other table with 		other table with 		load objects from target table matching FK = this.name
					self.getName() as FK	self.getName() as FK